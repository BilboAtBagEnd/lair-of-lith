<script>
  <% if @version && @version.csv %>
var CHARACTER_CSV = _.unescape('<%=raw @version.csv.gsub("'", "\\\\'").strip %>');
  <% else %>
var CHARACTER_CSV = 'v4|Somewhat A Very, Very, Very Long Name Indeed|The Example|Ancient|Faer|Lord|Woman|7|4|6|6|2|2|5|3|7|8|8|2|5|3|5|6|3|1|2|5|0|single|4|3|2|1|Auto Pistol,Auto Rifle|Blade,Brawler|1|1|1|Bot,Gadget,Mount|1|1|1|Move cost 1 in Swamp.|10|0|0|0|This character leaps over other character whenever damage is dealt using its natural melee attack. Just like how the quick red fox jumped over the lazy brown dogs.|10|10|0|0'
  <% end %>

var CHARACTER_UNDO_STACK = [];
var CHARACTER_REDO_STACK = [];
var PORTRAIT_IMAGE = null;
var PORTRAIT_IMAGE_TRAITS = {
    x: 0,
    y: 0,
    width: 740,
    height: 1204,
};

function fillInAgeSelector() {
    var options = "";
    for (var i = 0; i < DOA2.AGES.length; i++) {
        options += "<option>" + DOA2.AGES[i] + "</option>";
    }
    $("#age").html(options);
}

function fillInSettingSelector() {
    var options = "";
    var age = $("#age :selected").text();
    if (age) {
        for (var i = 0; i < DOA2.SETTINGS[age].length; i++) {
            options += "<option>" + DOA2.SETTINGS[age][i] + "</option>";
        }
    }
    $("#setting").html(options);
}

function setUpAbilityFields() {
    for (var i = 1; i <= 9; i++) {
        var html = '<tr><td><textarea id="special-' + i + '-desc"></textarea></td><td><table>';
        html += '<tr><td>Survival:</td><td><input class="number" id="special-' + i + '-survival" /></td></tr>';
        html += '<tr><td>Melee:</td><td><input class="number" id="special-' + i + '-melee" /></td></tr>';
        html += '<tr><td>Ranged:</td><td><input class="number" id="special-' + i + '-ranged" /></td></tr>';
        html += '<tr><td>Adventure:</td><td><input class="number" id="special-' + i + '-adventure" /></td></tr>';
        html += '</table></td></tr>';
        $("#ability-table").append(html);
    }
}

function setFieldsFromCharacter() { 
try {
    $("#name").val(CHARACTER.name);
    $("#title").val(CHARACTER.title);
    $("#age").val(CHARACTER.age);
    fillInSettingSelector();
    $("#setting").val(CHARACTER.setting);
    $("#circle").val(CHARACTER.circle);
    $("#nature").val(CHARACTER.nature);

    for (var i = 0; i < DOA2.STATS.length; i++) {
        var stat = DOA2.STATS[i];
        $("#" + stat).val(CHARACTER[stat]);
    }
    
    $("#ranged-power").val(CHARACTER.rangedWeapon.power);
    $("#ranged-damage").val(CHARACTER.rangedWeapon.damage);
    $("#ranged-opfire").val(CHARACTER.rangedWeapon.opfire);
    $("#ranged-range-max").val(CHARACTER.rangedWeapon.rangeMax);
    $("#ranged-range-min").val(CHARACTER.rangedWeapon.rangeMin);
    $("#ranged-area").val(CHARACTER.rangedWeapon.area);

    for (i = 0; i < DOA2.CARD_TYPES.length; i++) {
        var cardType = DOA2.CARD_TYPES[i];
        $("#" + cardType + "-cards").val(CHARACTER.cards[cardType]);
    }
    $("#no-give-cards").prop('checked', CHARACTER.cards.noGive);
    $("#no-trade-cards").prop('checked', CHARACTER.cards.noTrade);
    $("#no-card-limit").prop('checked', CHARACTER.cards.noLimit);

    $("#ranged-bonuses").val(CHARACTER.bonuses.ranged.join(", "));
    $("#melee-bonuses").val(CHARACTER.bonuses.melee.join(", "));
    $("#other-bonuses").val(CHARACTER.bonuses.other.join(", "));

    $("#medical-bonus").prop('checked', CHARACTER.bonuses.medical == 1);
    $("#stealth-bonus").prop('checked', CHARACTER.bonuses.stealth == 1);
    $("#armor-bonus").prop('checked', CHARACTER.bonuses.armor == 1);
    
    for (i = 0; i < 9; i++) {
        $("#special-" + (i+1) + "-desc").val("");
        $("#special-" + (i+1) + "-survival").val(0);
        $("#special-" + (i+1) + "-melee").val(0);
        $("#special-" + (i+1) + "-ranged").val(0);
        $("#special-" + (i+1) + "-adventure").val(0);
    }

    for (i = 0; i < CHARACTER.specials.length; i++) {
        var special = CHARACTER.specials[i];
        $("#special-" + (i+1) + "-desc").val(special.description);
        $("#special-" + (i+1) + "-survival").val(special.value.survival);
        $("#special-" + (i+1) + "-melee").val(special.value.melee);
        $("#special-" + (i+1) + "-ranged").val(special.value.ranged);
        $("#special-" + (i+1) + "-adventure").val(special.value.adventure);
    }
} catch (error) { console.log(error); }
}

function setCharacterFromFields() {
    CHARACTER_UNDO_STACK.push(CHARACTER);
    CHARACTER = $.extend(true, {}, CHARACTER); // clone
    CHARACTER_REDO_STACK = [];
    
    CHARACTER.name = $("#name").val();
    CHARACTER.title = $("#title").val();
    CHARACTER.age = $("#age").val();
    CHARACTER.setting = $("#setting").val();
    CHARACTER.circle = $("#circle").val();
    CHARACTER.nature = $("#nature").val();

    for (var i = 0; i < DOA2.STATS.length; i++) {
        var stat = DOA2.STATS[i];
        CHARACTER[stat] = parseInt($("#" + stat).val());
    }
    
    CHARACTER.rangedWeapon.power = parseInt($("#ranged-power").val());
    CHARACTER.rangedWeapon.damage = parseInt($("#ranged-damage").val());
    CHARACTER.rangedWeapon.opfire = parseInt($("#ranged-opfire").val());
    CHARACTER.rangedWeapon.rangeMax = parseInt($("#ranged-range-max").val());
    CHARACTER.rangedWeapon.rangeMin = parseInt($("#ranged-range-min").val());
    CHARACTER.rangedWeapon.area = $("#ranged-area").val();

    for (i = 0; i < DOA2.CARD_TYPES.length; i++) {
        var cardType = DOA2.CARD_TYPES[i];
        CHARACTER.cards[cardType] = parseInt($("#" + cardType + "-cards").val());
    }
    CHARACTER.cards.noGive = $("#no-give-cards").is(":checked");
    CHARACTER.cards.noTrade = $("#no-trade-cards").is(":checked");
    CHARACTER.cards.noLimit = $("#no-card-limit").is(":checked");

    CHARACTER.bonuses.ranged = splitOnCommas($("#ranged-bonuses").val());
    CHARACTER.bonuses.melee = splitOnCommas($("#melee-bonuses").val());
    CHARACTER.bonuses.other = splitOnCommas($("#other-bonuses").val());

    CHARACTER.bonuses.medical = $("#medical-bonus").is(':checked') ? 1 : 0;
    CHARACTER.bonuses.stealth = $("#stealth-bonus").is(':checked') ? 1 : 0;
    CHARACTER.bonuses.armor = $("#armor-bonus").is(':checked') ? 1 : 0;

    var specials = [];
    for (i = 1; i <= 9; i++) {
        if ($("#special-" + i + "-desc").val() != "") {
            specials[i-1] = { 
                description: $("#special-" + i + "-desc").val(), 
                value: { 
                    survival: parseInt($("#special-" + i + "-survival").val() || 0), 
                    melee: parseInt($("#special-" + i + "-melee").val() || 0), 
                    ranged: parseInt($("#special-" + i + "-ranged").val() || 0), 
                    adventure: parseInt($("#special-" + i + "-adventure").val() || 0), 
                }
            }
        }
    }
    CHARACTER.specials = specials;
}

function updateCharacterValue() {
    var breakdown = DOA2.calculateCharacterValue(CHARACTER);
    $("#survival-value").html(breakdown.survival);
    $("#melee-value").html(breakdown.melee);
    $("#ranged-value").html(breakdown.ranged);
    $("#adventure-value").html(breakdown.adventure);
    $("#total-value").html(breakdown.total);
}

function outputBGGCharacterCode() {
    $("#text-output").val(DOA2_Text.characterToBGGCode(CHARACTER));
}

function getCSV() {
    return DOA2_Text.characterToCSV(CHARACTER);
}
function outputCSV() {
    $("#text-output").val(getCSV());
}

function parseCSV(csv) {
    return DOA2_Text.csvToCharacter(csv);
}
function loadCSV() {
    var csv = $("#text-input").val();    
    CHARACTER = parseCSV(csv);
}

function generateCard() {
    DOA2_Image.generateCard({ 
        character: CHARACTER,
        canvas: document.getElementById("card-canvas"),
        cardImage: document.getElementById("card-image"),
        cardLink: document.getElementById("card-image-link"),
        progressText: $("#progress-text"),
        useParchment: $("#parchment").is(":checked"),
        portraitImage: PORTRAIT_IMAGE,
        portraitFit: $('#image-window input[name="portrait-fit"]:checked').val(),
        portraitTraits: PORTRAIT_IMAGE_TRAITS,
    });
}

$(document).ready(function() {
    CHARACTER = parseCSV(CHARACTER_CSV);

    fillInAgeSelector();
    fillInSettingSelector();
    setUpAbilityFields();

    setFieldsFromCharacter();
    updateCharacterValue();
    
    $("#open-bgg-window").click(function(e) {
        e.preventDefault();
        outputBGGCharacterCode();
        $("#output-window").toggle(true);
    });
    
    $("#open-csv-window").click(function(e) {
        e.preventDefault();
        outputCSV();
        $("#output-window").toggle(true);
    });

    $("#close-output-window").click(function(e) {
        e.preventDefault();
        $("#output-window").toggle(false);
    });

    $("#age").change(function() { 
        fillInSettingSelector(); 
        setCharacterFromFields();
    });

    $("#calculator select, #calculator textarea, #calculator input").change(function() { 
        setCharacterFromFields();
        updateCharacterValue(); 
    });
    
    $("#reset").click(function() {
        CHARACTER_UNDO_STACK.push(CHARACTER);
        CHARACTER = new parseCSV(CHARACTER_CSV);
        setFieldsFromCharacter();
        updateCharacterValue();
    });

    $("#clear").click(function() {
        CHARACTER_UNDO_STACK.push(CHARACTER);
        CHARACTER = new DOA2.Character();
        setFieldsFromCharacter();
        updateCharacterValue();
    });

    $("#undo").click(function() {
        if (CHARACTER_UNDO_STACK.length > 0) {
            CHARACTER_REDO_STACK.push(CHARACTER);
            CHARACTER = CHARACTER_UNDO_STACK.pop();
            setFieldsFromCharacter();
            updateCharacterValue();
        }
    });
    $("#redo").click(function() {
        if (CHARACTER_REDO_STACK.length > 0) {
            CHARACTER_UNDO_STACK.push(CHARACTER);
            CHARACTER = CHARACTER_REDO_STACK.pop();
            setFieldsFromCharacter();
            updateCharacterValue();
        }
    });

    $("#load").click(function(e) {
        e.preventDefault();
        $("#input-window").toggle(true);
    });
    $("#close-input-window").click(function(e) {
        e.preventDefault();
        $("#input-window").toggle(false);
    });
    $("#load-input").click(function(e) {
        e.preventDefault();
        $("#input-window").toggle(false);
        CHARACTER_UNDO_STACK.push(CHARACTER);
        loadCSV();
        $("#text-input").val("");
        setFieldsFromCharacter();
        updateCharacterValue();
    });
    
    $("#generate-image").click(function(e) {
        e.preventDefault();
        $("#image-window").toggle(true);
        generateCard();
    });
    $("#close-image-window").click(function(e) {
        e.preventDefault();
        $("#image-window").toggle(false);
    });
    
    $("#portrait-file").change(function() {
        $('#image-window input[value="Fit"]').prop('checked', true);
        var imageFile = this.files[0];
        var reader = new FileReader();
        reader.onload = function(event) {
            var content = event.target.result;
            PORTRAIT_IMAGE = new Image();
            PORTRAIT_IMAGE.src = content;
            generateCard();
            $('#image-window input[name="portrait-fit"]').prop("disabled", false);
        };
        reader.onerror = function() {
            console.log("Could not read portrait file.");
        };
        reader.readAsDataURL(imageFile);
    });
    
    $("#parchment").change(function() {
        generateCard();
    });
    
    $('#image-window input[name="portrait-fit"]').click(function() {
        if (PORTRAIT_IMAGE) {
           generateCard();
        }
    });
    $('#image-window input[value="Cropped"]').unbind('change');
    
    var imageEditor = null;
    var jcrop = null;
    var imageEditorCount = 0;
    
    $('#image-window input[value="Cropped"]').click(function() {
        function updatePortraitTraits(c) {
            PORTRAIT_IMAGE_TRAITS.x = Math.round(c.x);
            PORTRAIT_IMAGE_TRAITS.y = Math.round(c.y);
            PORTRAIT_IMAGE_TRAITS.width = Math.round(c.w);
            PORTRAIT_IMAGE_TRAITS.height = Math.round(c.h);
        }
        
        if (PORTRAIT_IMAGE) {
            $("#image-editor-window").toggle(true);

            if (imageEditor) {
                imageEditor.remove();
                imageEditor = null;
            }
            if (jcrop) {
                jcrop.destroy();
                jcrop = null;
            }
            imageEditorCount++;
            imageEditor = $('<img id="editor-' + imageEditorCount + '">');
            imageEditor.attr("src", PORTRAIT_IMAGE.src);
            $("#image-editor-window").append(imageEditor);
            imageEditor.Jcrop({
                onChange: updatePortraitTraits,
                onSelect: updatePortraitTraits,
                aspectRatio: 740 / 1204,
                boxHeight: 400,
                setSelect: [0, 0, 740, 1204],
            }, function() { jcrop = this; });
        }
    });
    
    $("#image-crop-button").click(function() {
        $("#image-editor-window").toggle(false);
        generateCard();
    });

    $("#save-card").click(function() {
        $("#save-card-form-name").val($("#name").val());
        $("#save-card-form-csv").val(getCSV());
        $("#save-card-form-auth").val($('meta[name="csrf-token"]').attr('content'));
        $("#save-card-form").submit();

        return;

        var saveURL = "<%= url_for controller: 'characters', action: 'save' %>";
        var postData = "name=" + encodeURIComponent($("#name").val()) + "&" 
                       + "csv=" + encodeURIComponent(getCSV());
        $.ajax({
          url: saveURL, 
          type: 'POST',
          beforeSend: function(xhr) {
              xhr.setRequestHeader('X-CSRF-Token', 
              $('meta[name="csrf-token"]').attr('content'))
          },
          data: postData,
          success: function(data, textStatus, xhr) {
              var message = "<p>Saved!<br />Name: " + _.escape(data.character.name) + "<br />Version: " + data.version.version  + "</p>";
              $("#save-window").html(message).toggle(true).delay(3000).fadeOut();
          },
          error: function(xhr, textStatus, errorThrown) {
              var message = "<p>Error: " + textStatus + " " + errorThrown + "</p>";
              $("#save-window").html(message).toggle(true).delay(3000).fadeOut();
          },
        });
    });
});
</script>

<div style="clear: both; height: 1em;"></div>

<noscript><p>You need Javascript enabled to use this tool.</p></noscript>

<% unless user_signed_in? || @owner %>
  <p class="alert">
  You will not be able to save this card until you 
  <%= link_to 'log in', new_user_session_path %>!
  </p>
<% end %>

<div id="breakdown-panel">
  <p>
    Survival: <span id="survival-value"></span><br />
    Melee: <span id="melee-value"></span><br />
    Ranged: <span id="ranged-value"></span><br />
    Adventure: <span id="adventure-value"></span><br />
    Total Value: <span id="total-value"></span>
    <span class="note">(balanced = 500 ± 3)</span>
  </p>
  <p>
    <span class="title">Import</span>
    <button id="load">Load CSV</button>
  </p>
  <p>
    <span class="title">Export</span>
    <button id="open-bgg-window">BGG</button>
    <button id="open-csv-window">CSV</button>
  </p>
  <p>
    <span class="title">Render</span>
    <button id="generate-image">Get Card</button>
  </p>
<% if user_signed_in? %>
  <% if !@owner || (@owner.id == current_user.id) %>
    <p>
      <span class="title">Save</span>
      <form id="save-card-form" style="display: none;" method="post" action="<%= url_for controller: 'characters', action: 'save' %>">
        <input id="save-card-form-name" type="hidden" name="name" />
        <input id="save-card-form-csv" type="hidden" name="csv" />
        <input id="save-card-form-auth" type="hidden" name="authenticity_token" />
      </form>
      <button id="save-card">Save Card</button>
    </p>
  <% end %>
<% end %>
  <p>
    <span class="title">Edit</span>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
    <button id="reset">Reset</button>
    <button id="clear">Clear</button>
  </p>
</div>

<div id="calculator">

<div id="output-window">
  <textarea id="text-output"></textarea>
  <a href="#" id="close-output-window">Close</a>
</div>
<div id="input-window">
  <textarea id="text-input"></textarea>
  <a href="#" id="load-input">Load</a>
  <a href="#" id="close-input-window">Close</a>
</div>
<div id="image-window">
    <div id="image-preferences">
      Portrait? <input id="portrait-file" type="file" /><br />
      <input type="radio" name="portrait-fit" disabled value="Fill" /><label>Fill</label>
      <input type="radio" name="portrait-fit" disabled value="Fit" checked /><label>Fit</label>
      <input type="radio" name="portrait-fit" disabled value="Original" /><label>Original</label>
      <input type="radio" name="portrait-fit" disabled value="Cropped" /><label>Cropped</label>
      <br />
      Parchment? <input id="parchment" type="checkbox" />
    </div>
    <img id="card-image" width="225" />
    <canvas id="card-canvas" width="945" height="1418" style="display: none;"></canvas>
    <div id="image-description">
      <p>
        <strong>Only supported in HTML5-capable browsers.</strong>
        <strong>Portrait not supported in Safari.</strong>
      </p>
      <p id="progress-text"></p>
      <p>This image is actually much bigger, it's scaled down for this window. To save, either:</p>
      <p>
        Right-click on the image and "Save as...", OR<br />
        Right-click on the link below and "Save target as..."
      </p>
      <p><a target="_blank" id="card-image-link">Save Card</a> <a href="#" id="close-image-window">Close</a></p>
    </div>
</div>
<div id="image-editor-window">
  <button id="image-crop-button">Crop</button>
</div>
<div id="save-window">
  <div id="save-window-contents"></div>
</div>

<table style="float: right;">
  <tr><th>Speed</th><td><input class="number stat" id="speed" type="text" /></td></tr>
  <tr><th>Health</th><td><input class="number stat" id="health" type="text" /></td></tr>
  
  <tr><th class="stat-title" colspan="2">Melee</th></tr>
  <tr><th>Wits</th><td><input class="number stat" id="wits" type="text" /></td></tr>
  <tr><th>Melee</th><td><input class="number stat" id="melee" type="text" /></td></tr>
  <tr><th>Power</th><td><input class="number stat" id="power" type="text" /></td></tr>
  <tr><th>Damage</th><td><input class="number stat" id="damage" type="text" /></td></tr>
  
  <tr><th class="stat-title" colspan="2">Ranged</th></tr>
  <tr><th>Aim</th><td><input class="number stat" id="aim" type="text" /></td></tr>
  <tr><th>Point</th><td><input class="number stat" id="point" type="text" /></td></tr>
  <tr><th>Throw</th><td><input class="number stat" id="throw" type="text" /></td></tr>
  
  <tr><th class="stat-title" colspan="2">Defense</th></tr>
  <tr><th>React</th><td><input class="number stat" id="react" type="text" /></td></tr>
  <tr><th>Stealth</th><td><input class="number stat" id="stealth" type="text" /></td></tr>
  <tr><th>Armor</th><td><input class="number stat" id="armor" type="text" /></td></tr>
  
  <tr><th class="stat-title" colspan="2">Traits</th></tr>
  <tr><th>Strength</th><td><input class="number stat" id="strength" type="text" /></td></tr>
  <tr><th>Intellect</th><td><input class="number stat" id="intellect" type="text" /></td></tr>
  <tr><th>Honor</th><td><input class="number stat" id="honor" type="text" /></td></tr>
  <tr><th>Respect</th><td><input class="number stat" id="respect" type="text" /></td></tr>

  <tr><th class="stat-title" colspan="2">Ranged Weapon</th></tr>
  <tr><th>Power</th><td><input class="number" id="ranged-power" type="text" /></td></tr>
  <tr><th>Damage</th><td><input class="number" id="ranged-damage" type="text" /></td></tr>
  <tr><th>OpFire</th><td><input class="number" id="ranged-opfire" type="text" /></td></tr>
  <tr><th>rangeMax</th><td><input class="number" id="ranged-range-max" type="text" /></td></tr>
  <tr><th>rangeMin</th><td><input class="number" id="ranged-range-min" type="text" /></td></tr>
  <tr><th>Area</th><td><select id="ranged-area"><option>-</option><option>single</option><option>area</option></select></td></tr>
</table>

<table>
  <tr><th>Name</th><td><input class="text" id="name" type="text" /></td></tr>
  <tr><th>Title</th><td><input class="text" id="title" type="text" /></td></tr>
  <tr>
    <th>Age</th>
    <td><select id="age"></select>
    </td>
  </tr>
  <tr>
    <th>Setting</th>
    <td><select id="setting"></select>
    </td>
  </tr>
  <tr>
    <th>Circle</th>
    <td>
      <select id="circle">
          <option>Adventurer</option>
          <option>Commoner</option>
          <option>Defender</option>
          <option>Exemplar</option>
          <option>Icon</option>
          <option>Lord</option>
          <option>Outcast</option>
          <option>Villain</option>
          <option>Warrior</option>
      </select>
    </td>
  </tr>
  <tr>
    <th>Nature</th>
    <td>
      <select id="nature">
          <option>Being</option>
          <option>Child</option>
          <option>Fairy</option>
          <option>Fiend</option>
          <option>Holy</option>
          <option>Machine</option>
          <option>Man</option>
          <option>Woman</option>
      </select>
    </td>
  </tr>
</table>

<table>
  <tr><th class="stat-title" colspan="4">Starting Cards</th></tr>
  <tr><th>Common</th><td><input class="number" id="common-cards" type="text" /></td>
      <th>Secret</th><td><input class="number" id="secret-cards" type="text" /></td></tr>
  <tr><th>Elite</th><td><input class="number" id="elite-cards" type="text" /></td>
      <th>Henchmen</th><td><input class="number" id="henchmen-cards" type="text" /></td></tr>
  <tr><th>No Give</th><td><input id="no-give-cards" type="checkbox" /></td></tr>
  <tr><th>No Trade</th><td><input id="no-trade-cards" type="checkbox" /></td></tr>
  <tr><th>No Limit</th><td><input id="no-card-limit" type="checkbox" /></td></tr>
</table>

<table>
  <tr><th class="stat-title" colspan="2">Bonuses (comma-separated)</th></tr>
  <tr><th>Ranged</th><td><input class="text" id="ranged-bonuses" type="text" /></td></tr>
  <tr><th>Melee</th><td><input class="text" id="melee-bonuses" type="text" /></td></tr>
  <tr><th>Medical</th><td><input id="medical-bonus" type="checkbox" /></td></tr>
  <tr><th>Stealth</th><td><input id="stealth-bonus" type="checkbox" /></td></tr>
  <tr><th>Armor</th><td><input id="armor-bonus" type="checkbox" /></td></tr>
  <tr><th>Other</th><td><input class="text" id="other-bonuses" type="text" /></td></tr>
</table>

<table id="ability-table">  
  <tr><td class="stat-title">Ability</td><td class="stat-title">Value</td></tr>
</table>

</div>

